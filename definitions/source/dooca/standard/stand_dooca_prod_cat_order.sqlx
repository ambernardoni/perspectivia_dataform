config {
    type: "view",
    schema: "standard",
    description: "Cleaned up version of orders",
    tags: ['dooca']
}

-- Este script extrai as informações de produtos comprados, 
-- e já prepara no formato certo para fazer parte dos pedidos depois como um ARRAY de STRUCT da tabela Orders
-- o que tiver de informação aqui será inserida o array de itens dentro da tabela "Orders"

SELECT
  CAST(O.id AS STRING) AS order_id,

  -- Dados do produto (mas pegamos o que dava da tabela orders pois a tabela products estava incompleta)
  SAFE_CAST(JSON_VALUE(json_item, "$.product_id") AS INT64) AS product_id,
  JSON_VALUE(json_item, "$.name")  AS product_name,
  JSON_VALUE(json_item, "$.sku")  AS product_sku,
  prod_cat.category_name  AS category_name,
  prod_cat.category_id  AS category_id,
  "" AS subcategory_id,
  "" AS subcategory_name,


  -- Dados específicos do pedido
  SAFE_CAST(JSON_VALUE(json_item, "$.quantity") AS INT64)  AS quantity,
  SAFE_CAST(JSON_VALUE(json_item, "$.price") AS FLOAT64)  AS price_unit,
  SAFE_CAST(JSON_VALUE(json_item, "$.discount") AS FLOAT64)  AS price_discount,
  SAFE_CAST(JSON_VALUE(json_item, "$.total") AS FLOAT64)  AS price_total

FROM
  -- Itens do pedido
  ${ref("raw_dooca_Orders")} O,
  UNNEST(JSON_EXTRACT_ARRAY(O.items, '$')) AS json_item

  -- Cadastro de produtos e categorias
  LEFT JOIN ${ref("stand_dooca_prod_cat")} prod_cat
  
  -- Join
     ON SAFE_CAST(JSON_VALUE(json_item,"$.product_id") AS STRING)  = prod_cat.product_id


