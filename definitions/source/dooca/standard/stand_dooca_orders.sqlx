--------------------------------------------------------------------------------------------------
  -- Converte as informações no formato da plataforma para o formato da PERSPECTIVIA
  -- A maior parte da lógica de transformação de formatos está aqui.
  -- DONWSTREAM: Essa view será usada pelo processamento geral (independente de plataforma]
--------------------------------------------------------------------------------------------------

config {
    type: "view",
    schema: "standard",
    description: "Cleaned up version of orders",
    tags: ['dooca'],
    disabled: false
}

SELECT
  _airbyte_extracted_at,
  SAFE_CAST(id AS STRING) AS order_id,
  SAFE_CAST(created_at AS DATETIME) AS creation_date,
  SAFE_CAST(updated_at AS DATETIME) AS update_date,

  -- Status
--  ${order_status_type()} AS status_type,
  ${order_status_type_category()} AS status_type_category,
  status AS status_type_detail,     

  "e-commerce" AS point_of_sale, -- Dooca não guarda outros parâmteros aqui?
  
  -------------  value ---------------  
  STRUCT 
  (
    SAFE_CAST(total AS FLOAT64) AS total,
    ( 
      SELECT sum (SAFE_CAST(JSON_VALUE(json_items,"$.price") AS FLOAT64)) 
        FROM UNNEST(JSON_EXTRACT_ARRAY(items, '$')) AS json_items
    ) AS items,    
    SAFE_CAST(discount AS FLOAT64) AS discounts,
    SAFE_CAST(JSON_VALUE (shipping, "$.price") AS FLOAT64) AS shipping,
    SAFE_CAST(tax AS FLOAT64) AS tax
  ) 
  AS value,

  -------------  payment -------------  
  STRUCT 
  (
 --   ${payment_status_type()}  AS status_type,
    payment_status AS status_detail,
    JSON_VALUE (payment ,"$.method") AS method,
    JSON_VALUE (payment ,"$.name") AS method_detail
  )
  AS payment,

  -------------  address -------------  
  STRUCT 
  (
    JSON_VALUE(address, '$.zipcode') AS shipping_zipcode,
    JSON_VALUE(address, '$.city') AS shipping_city,
    JSON_VALUE(address, '$.state') AS shipping_state,
    "Brasil" AS shipping_country
  ) 
  AS address,

  -------------  customer ------------  
  STRUCT 
  (
    SAFE_CAST(customer_id AS STRING) AS customer_id,
    JSON_VALUE(customer, '$.name') AS name,
    JSON_VALUE(customer, '$.cgc') AS doc_number,
    JSON_VALUE(customer, '$.email') AS email,
    JSON_VALUE(customer, '$.phone') AS phone
  ) 
  AS customer,

FROM
  ${ref("raw_dooca_Orders")} O


-------------------------------------------------------------------------------
--------------------------  DEFINIÇÂO DE RECEITA APROVADA ---------------------

js {
// Essa informação é usada para definir o status geral do pedido na tabelas orders (orders.sqlx)
// SQL
//    WHEN payment.status_type = "Cancelado" OR status_type = "Cancelado" THEN "Cancelado"
//    WHEN payment.status_type = "Aprovado" AND status_type <> "Cancelado" THEN "Aprovado"
//    ELSE "Pendente" 



//-----------------------------------------------
// status_type_gategoriy [Aprovado, Cancelado, Pendente]
function order_status_type_category(){
  return `
  case
    when (status in ('canceled') or (payment_status in ('canceled', 'refunded', 'denied', 'expired'))) then 'Cancelado'
    when (payment_status in ('approved')) then 'Aprovado'
    else 'Pendente'
  end`; }

//-----------------------------------------------
// status_type [Aprovado, Cancelado, Pendente Outros]
function order_status_type(){
  return `
  case
    when status in ('archived', 'open') then 'Aprovado'
    when status in ('canceled') then 'Cancelado'
    else 'Outros'
  end`; }

//-----------------------------------------------
// paymet.status_type [Confirmado, Cancelado, Pendente, Outros]
function payment_status_type(){
  return `
  case
    when payment_status in ('approved') then 'Aprovado'
    when payment_status in ('canceled', 'refunded', 'denied', 'expired') then 'Cancelado'
    when payment_status in ('pending') then 'Pendente'
    else 'Outros'
  end`; }


}


  
