config {
    description: "Padronização da tabela de produtos por pedido",
    schema: "standard",
    type: "view",
    columns: {
        order_id: "Identificador único do pedido",
        product_id: "Identificador único do produto",
        quantity: "Quantidade do produto no pedido",
        price_unit: "Preço unitário do produto",
        price_discount: "Valor do desconto aplicado ao produto",
        price_total: "Preço total do produto no pedido"
    },
    tags: ['b4c']
}



  SELECT
    O.codigo as order_id,
    prod.codigo AS product_id,
    SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) as product_sku,

  -- Dados do pedido
  SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS INT64) AS quantity,
  SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) AS price_unit,
  SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64) AS price_discount,
  (
     SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS FLOAT64) *
     SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) -
     SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64)
  ) AS price_total

FROM
  ${ref("stg_b4c_orders_all")} O,
  UNNEST(JSON_EXTRACT_ARRAY(entregas, '$')) AS delivery,
    UNNEST(JSON_EXTRACT_ARRAY(delivery, '$.itens')) AS json_item
  -- tabela de produos
  LEFT JOIN ${ref("raw_b4c_Products")} prod
  -- Critério do join
     ON SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) = prod.sku


/*
  SELECT
    O.id as order_id,
    JSON_VALUE(P.id) AS product_id,
    "" as product_sku,
    1 AS quantity,
    1 AS price_unit,
    0 as price_discount,
    (1 * 1) AS price_total     -- price_unity * price_total

  FROM
      ${ref("raw_tray_Orders")} O,
      UNNEST(JSON_EXTRACT_ARRAY(ProductsSold)) AS P


------------------------------------------------------------------------------------------------
 -- Extrai as informações de produtos comprados,e já prepara no formato certo  
 -- para fazer parte dos pedidos depois como um ARRAY de STRUCT da tabela Orders
 -- o que tiver de informação aqui será inserida como array de itens dentro da tabela "Orders
 -- DONWSTREAM: Essa view será usada pelo processamento geral (independente de plataforma]
------------------------------------------------------------------------------------------------

config {
    type: "view",
    schema: "standard",
    description: "Cleaned up version of orders",
    tags: ['b4c']
}

SELECT
  O.codigo AS order_id,

  -- Dados do produto
  prod_cat.product_id AS  product_id,
  prod_cat.product_name AS  product_name,
  SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) AS  product_sku,
  prod_cat.category_name AS  category_name,
  prod_cat.category_id AS  category_id,
  prod_cat.subcategory_id AS  subcategory_id,
  prod_cat.subcategory_name AS  subcategory_name,

  -- Dados do pedido
  SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS INT64) AS quantity,
  SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) AS price_unit,
  SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64) AS price_discount,
  (
     SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS FLOAT64) *
     SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) -
     SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64)
  ) AS price_total

FROM
  -- tabela de pedidos 0 items abertos
-- ${ref("raw_b4c_Orders_hist")} O,
  ${ref("stg_b4c_orders_all")} O,
  UNNEST(JSON_EXTRACT_ARRAY(entregas, '$')) AS delivery,
    UNNEST(JSON_EXTRACT_ARRAY(delivery, '$.itens')) AS json_item
  -- tabela de produos
  LEFT JOIN ${ref("stand_b4c_prod_cat")} prod_cat
  -- Critério do join
     ON SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) = prod_cat.product_sku

*/


