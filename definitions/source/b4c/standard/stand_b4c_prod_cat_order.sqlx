config {
    type: "view",
    schema: "standard",
    description: "Cleaned up version of orders",
    tags: ['b4c']
}

-- Este script extrai as informações de produtos comprados, 
-- e já prepara no formato certo para fazer parte dos pedidos depois como um ARRAY de STRUCT da tabela Orders
-- o que tiver de informação aqui será inserida o array de itens dentro da tabela "Orders"

SELECT
  O.codigo AS order_id,

  -- Dados do produto
  prod_cat.product_id AS  product_id,
  prod_cat.product_name AS  product_name,
  SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) AS  product_sku,
  prod_cat.category_name AS  category_name,
  prod_cat.category_id AS  category_id,
  "" AS  subcategory_id,
  "" AS  subcategory_name,

  -- Dados do pedido
  SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS INT64) AS quantity,
  SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) AS price_unit,
  SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64) AS price_discount,
  (
     SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) *
     SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) -
     SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64)
  ) AS price_total

FROM
  -- tabela de pedidos 0 items abertos
  ${ref("raw_b4c_Orders")} O,
  UNNEST(JSON_EXTRACT_ARRAY(entregas, '$')) AS delivery,
    UNNEST(JSON_EXTRACT_ARRAY(delivery, '$.itens')) AS json_item
  -- tabela de produos
  LEFT JOIN ${ref("stand_b4c_prod_cat")} prod_cat
  -- Critério do join
     ON SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) = prod_cat.product_sku



