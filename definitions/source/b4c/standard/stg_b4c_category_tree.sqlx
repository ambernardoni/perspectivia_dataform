--------------------------------------------------------------------------------
 -- STAGE -  Processamento interno dos dados da B4C
 -- materializa uma tabela de categorias e subcategorias (com dois n√≠veis).
 -- DOWNSTREAM: complementar os dados de produtos vendidos 
--------------------------------------------------------------------------------

config {
    type: "table",
    schema: "standard",
    description: "Tabela contendo a estrutura das categorias",
    tags: ['b4c']
}

WITH RECURSIVE CategoryPath AS (
    -- Base case: Select all categories and their immediate parent
    SELECT 
        codigo, 
        descricao, 
        codigo_pai, 
        codigo AS id_level0, 
        descricao AS name_level0, 
        "0" AS id_level1, 
        '' AS name_level1, 
        "0" AS id_level2, 
        '' AS name_level2,
        1 AS Level
    FROM ${ref("raw_b4c_Categories")}
    WHERE codigo_pai = "0"

    UNION ALL

    -- Recursive step: Join with the CTE to find ancestors and update level-specific data
    SELECT 
        c.codigo, 
        c.descricao, 
        c.codigo_pai, 
        cp.id_level0,
        cp.name_level0,
        CASE 
            WHEN cp.Level = 1 THEN c.codigo 
            ELSE cp.id_level1 
        END AS id_level1,
        CASE 
            WHEN cp.Level = 1 THEN c.descricao
            ELSE cp.name_level1 
        END AS name_level1,
        CASE 
            WHEN cp.Level = 2 THEN c.codigo
            ELSE "0" 
        END AS id_level2,
        CASE 
            WHEN cp.Level = 2 THEN c.descricao
            ELSE '' 
        END AS name_level2,
        cp.Level + 1
    FROM ${ref("raw_b4c_Categories")} c
    INNER JOIN CategoryPath cp ON c.codigo_pai = cp.codigo
)

-- Select all columns from the CTE
SELECT codigo, descricao, codigo_pai,  id_level0, name_level0, id_level1, name_level1, id_level2, name_level2
FROM CategoryPath
ORDER BY codigo
