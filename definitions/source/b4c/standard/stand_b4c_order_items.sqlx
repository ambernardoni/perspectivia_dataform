config {
    type: "view",
    schema: "standard",
    description: "Cleaned up version of orders",
    tags: ['b4c']
}

-- Este script extrai as informações de produtos comprados, 
-- e já prepara no formato certo para fazer parte dos pedidos depois como um ARRAY de STRUCT da tabela Orders

SELECT
  O.codigo AS order_id,

  -- Dados do produto
  pc.product_id AS product_id,
  pc.product_name AS product_name,
--  pc.product_sku AS product_sku,
  SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) AS product_sku,
  pc.category_name AS category_name,
  pc.category_id AS category_id,
  "" AS subcategory_id,
  "" AS subcategory_name,

  -- Dados do pedido
  SAFE_CAST(JSON_VALUE(json_item, "$.quantidade") AS INT64) AS quantity,
  SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) AS price_unit,
  SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64) AS price_discount,
  SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) *
     SAFE_CAST(JSON_VALUE(json_item, "$.valor") AS FLOAT64) -
     SAFE_CAST(JSON_VALUE(json_item, "$.desconto_total") AS FLOAT64) AS price_total

FROM
  -- tabela de pedidos 0 items abertos
  ${ref("raw_b4c_Orders")} O,
  UNNEST(JSON_EXTRACT_ARRAY(entregas, '$')) AS delivery,
    UNNEST(JSON_EXTRACT_ARRAY(delivery, '$.itens')) AS json_item
  -- tabela de produos
  LEFT JOIN ${ref("stand_b4c_product_category")} pc 
  -- Critério do join
     ON SAFE_CAST(JSON_VALUE(json_item, "$.sku") AS STRING) = SAFE_CAST(pc.product_sku AS STRING)



