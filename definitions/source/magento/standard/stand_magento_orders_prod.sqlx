config {
    description: "Padronização da tabela de produtos por pedido",
    schema: "standard",
    type: "view",
    columns: {
        order_id: "Identificador único do pedido (string)",
        product_id: "Identificador único do produto (string)",
        quantity: "Quantidade do produto no pedido (int64)",
        price_unit: "Preço unitário do produto (float64)",
        price_discount: "Valor do desconto aplicado ao produto (float64)",
        price_total: "Preço total do produto no pedido (float64)"
    },
    tags: ['magento']
}

----------------------------------------------------------------------------------------------------------
-- Colocando aqui código para para de-duplicar pedidos.
-- as demais deduplicações de plataforma estão na camada staging, mas essa aqui não teve muito jeito.
-- Não sei o quanto isso se encaixa aqui com uma estratégia futura de carga incremental... que deveria ser no orders
--   mas não quis de-duplicar essa tabela depois, pois não sei se a forma de localizar registros duplicados (order_id+product_id+sku)
--   é confiável e não vai introduzir novos problemas...
WITH
  order_deduplicated AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY entity_id ORDER BY _airbyte_extracted_at DESC) AS rn
  FROM
     ${ref("raw_magento_Orders")}
),

--- Aqui abaixo é o código Magento
OrderItems AS (
  SELECT
    entity_id AS order_id,
    JSON_EXTRACT_ARRAY(items) AS items_array
  FROM
     order_deduplicated
)

SELECT
  SAFE_CAST (order_id AS STRING) AS order_id,
  JSON_EXTRACT_SCALAR(item, '$.product_id') AS product_id,
  JSON_EXTRACT_SCALAR(item, '$.sku') as product_sku,

  SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.qty_ordered') AS INT64) AS quantity,
  SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.price') AS FLOAT64) AS price_unit,
  0 as price_discount,
  SAFE_CAST(JSON_EXTRACT_SCALAR(item, '$.qty_ordered') AS INT64) * CAST(JSON_EXTRACT_SCALAR(item, '$.price') AS FLOAT64) AS price_total
FROM
  OrderItems,
  UNNEST(items_array) AS item

