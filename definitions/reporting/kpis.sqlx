--------------------------------------------------------------------------------------------------
-- Totaliza diversos KPIs da operação de e-commerce, dia a dia
--------------------------------------------------------------------------------------------------

config {
    type: "table",
    schema: "reporting",
    description: "Principais KPIs do ecommerce, dia a dia",
    tags: ['1-general'],

    assertions: {
      uniqueKey: ["date_kpi"],
      nonNull: ["date_kpi"],
      rowConditions: [
        'ABS (orders_captated - (orders_cancelled + orders_pending + orders)) <3',
        'ABS (revenue_total_captated - (revenue_total + revenue_total_cancelled + revenue_total_pending)) <3'
      ]
    }
}

WITH
-------------------------------------------------------------------
-- PLATAFORMA DE E-COMMERCE
-- KPIs da tabela de pedidos (orders) da plataforma de e-commerce

  orders_kpis AS (
SELECT
  DATE(creation_date) AS date_kpi,
  -- orders
  COUNTIF(status_type_category = 'Aprovado') AS orders,
  COUNT (*) AS orders_captated,
  COUNTIF(status_type_category = 'Cancelado') AS orders_cancelled,
  COUNTIF(status_type_category = 'Pendente') AS orders_pending,

  SUM (IF(status_type_category = 'Aprovado', quantity_variety_items,0)) AS quantity_variety_items,
  SUM (IF(status_type_category = 'Aprovado', quantity_items,0)) AS quantity_items,
  -- revenue
  SUM (IF(status_type_category = 'Aprovado', value.total,0)) AS revenue_total,
  SUM (value.total) AS revenue_total_captated,
  SUM (IF(status_type_category = 'Cancelado', value.total,0)) AS revenue_total_cancelled,
  SUM (IF(status_type_category = 'Pendente', value.total,0)) AS revenue_total_pending,
  SUM (IF(status_type_category = 'Aprovado', value.discounts,0)) AS revenue_discounts,
  SUM (IF(status_type_category = 'Aprovado', value.shipping,0)) AS revenue_shipping,

  -- recompra
  COUNTIF(customer_stats.days_since_last_order <= 30) AS orders_repurchase_30_days,
  COUNTIF(customer_stats.days_since_last_order <= 60) AS orders_repurchase_60_days,
  COUNTIF(customer_stats.days_since_last_order <= 90) AS orders_repurchase_90_days,
  COUNTIF(customer_stats.days_since_last_order <= 120) AS orders_repurchase_120_days,
  COUNTIF(customer_stats.days_since_last_order <= 180) AS orders_repurchase_180_days,
  COUNTIF(customer_stats.days_since_last_order <= 365) AS orders_repurchase_365_days
FROM
  ${ref("orders")}
GROUP BY
  date_kpi
  ),

-------------------------------------------------------------------
-- METAS
-- KPIs da tabela de metas do produto Perspectivia para aquele tenant 
  goals_kpis AS (
SELECT 
  date_creation as date_kpi, 
  meta_faturamento as goal_revenue
FROM 
  ${ref("stg_pp_goals")}
),

-------------------------------------------------------------------
-- GOOGLE ANALYTICS KPIS

-- KPIs da tabela do GA de sessions 
ga_session_kpis AS (
  SELECT
    date as date_kpi,
    sessions
  FROM
    ${ref("stg_ga_sessions")}
),

-- KPIs da tabela do GA de eventos 
ga_events_kpis AS (

  SELECT
    date as date_kpi,
    SUM ((CASE WHEN eventName ="add_to_cart" THEN sessions ELSE 0 END)) AS site_event_add_to_cart,
    SUM ((CASE WHEN eventName ="begin_checkout" THEN sessions ELSE 0 END)) AS site_event_begin_checkout,
    SUM ((CASE WHEN eventName ="add_shipping_info" THEN sessions ELSE 0 END)) AS site_event_add_shipping_info,
    SUM ((CASE WHEN eventName ="add_payment_info" THEN sessions ELSE 0 END)) AS site_event_add_payment_info
  FROM
    ${ref("stg_ga_events")}
  GROUP BY
    date
),

-- KPIs da tabela do GA de tráfego 
ga_traffic_kpis AS (
  SELECT
    date as date_kpi,
    SUM (sessions) AS sessions,
    SUM (engagedSessions) AS engagedSessions,
    SUM (totalUsers) AS totalUsers,
    SUM (newUsers) AS newUsers
  FROM
    ${ref("stg_ga_traffic")}
  GROUP BY
    date
),

-------------------------------------------------------------------
-- JUNTA AS DATAS
unified_dates AS (
  SELECT date_kpi FROM orders_kpis
  UNION DISTINCT
  SELECT date_kpi FROM goals_kpis
  UNION DISTINCT
  SELECT date_kpi FROM ga_session_kpis
  UNION DISTINCT
  SELECT date_kpi FROM ga_events_kpis
  UNION DISTINCT
  SELECT date_kpi FROM ga_traffic_kpis
)


--===============================================================================
--===============================================================================
-- JUNTA OS KPIS
-- Notas: Para facilitar o processamento downstream:
-- (que totaliza e calcula variações. Usas UNPIVOT, que demanta que seja tudo do mesmo tipo)
--     Usamos Float aqui (mesmo quando é inteiro)  
--     Não Usamos struct para agrupar campos parfecidos

SELECT
  ud.date_kpi AS date_kpi,
  EXTRACT(DAYOFWEEK FROM ud.date_kpi) AS weekday,

  CAST( o.orders AS FLOAT64 ) AS orders,
  CAST( o.orders_captated AS FLOAT64 ) AS orders_captated,
  CAST( o.orders_pending AS FLOAT64 ) AS orders_pending,
  CAST( o.orders_cancelled AS FLOAT64 ) AS orders_cancelled,

  CAST( o.quantity_variety_items AS FLOAT64 ) AS quantity_variety_items,
  CAST( o.quantity_items AS FLOAT64 ) AS quantity_items ,

  CAST( o.revenue_total AS FLOAT64 ) AS revenue_total,
  CAST( o.revenue_total_captated AS FLOAT64 ) AS revenue_total_captated,
  CAST( o.revenue_total_pending AS FLOAT64 ) AS revenue_total_pending,
  CAST( o.revenue_total_cancelled AS FLOAT64 ) AS revenue_total_cancelled,
  CAST( o.revenue_discounts AS FLOAT64 ) AS revenue_discounts ,
  CAST( o.revenue_shipping AS FLOAT64 ) AS revenue_shipping ,

  CAST( g.goal_revenue AS FLOAT64 ) AS goal_revenue,

  CAST( o.orders_repurchase_30_days AS FLOAT64 ) AS orders_repurchase_30_days,
  CAST( o.orders_repurchase_60_days AS FLOAT64 ) AS orders_repurchase_60_days,
  CAST( o.orders_repurchase_90_days AS FLOAT64 ) AS orders_repurchase_90_days,
  CAST( o.orders_repurchase_120_days AS FLOAT64 ) AS orders_repurchase_120_days,
  CAST( o.orders_repurchase_180_days AS FLOAT64 ) AS orders_repurchase_180_days,
  CAST( o.orders_repurchase_365_days AS FLOAT64 ) AS orders_repurchase_365_days,

  CAST( ga_s.sessions AS FLOAT64 ) AS sessions,
  CAST(ga_ev.site_event_add_to_cart AS FLOAT64 ) AS site_event_add_to_cart,
  CAST(ga_ev.site_event_begin_checkout AS FLOAT64 ) AS site_event_begin_checkout,
  CAST(ga_ev.site_event_add_shipping_info AS FLOAT64 ) AS site_event_add_shipping_info,
  CAST(ga_ev.site_event_add_payment_info AS FLOAT64 ) AS site_event_add_payment_info,

  CAST (ga_tf.sessions AS FLOAT64) AS site_sessions,
  CAST (ga_tf.engagedSessions AS FLOAT64) AS site_engaged_sessions,
  CAST (ga_tf.totalUsers AS FLOAT64) AS site_total_users,
  CAST (ga_tf.newUsers AS FLOAT64) AS site_new_users,

FROM unified_dates ud
LEFT JOIN orders_kpis o ON ud.date_kpi = o.date_kpi
LEFT JOIN goals_kpis g ON ud.date_kpi = g.date_kpi
LEFT JOIN ga_session_kpis ga_s ON ud.date_kpi = ga_s.date_kpi
LEFT JOIN ga_events_kpis ga_ev ON ud.date_kpi = ga_ev.date_kpi
LEFT JOIN ga_traffic_kpis ga_tf ON ud.date_kpi = ga_tf.date_kpi



