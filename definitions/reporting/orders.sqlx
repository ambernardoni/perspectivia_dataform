-------------------------------------------------------------------------------
-- Materializa a tabela de pedidos - uma das tabelas principais do sistema
--        Cria um status padronizado
--        Junta com dados dos produtos comprados
--        Cria estatísticas dos consumidores
-- Upstream - se conecta à 
--            tabela "padronizada" de pedidos de cada plataforma
--            tabela "padronizada" de produtos-pedidos de cada plataforma
-------------------------------------------------------------------------------

config {
    type: "table",
    schema: "reporting",
    description: "Pedidos realizados na loja",
    tags: ['1-general', '1.1-preorder'],

    bigquery: {
      partitionBy: "DATE(creation_date)"
    },

    columns: {
      status_type_detail: "Descrição do status que vem da plataforma de e-commerce", 
      status_type_category: "Descrição geral do status. [Cancelado] Se pedido ou pagto caneladp; [Aprovado] se pagto approvado e pedido não cancelado. [Pendente] caso contrário",
      payment: {
        description: "dados do pagamento",
        columns: {
          status_detail: "Descrição do status do pagamento que vem da plataforma de e-commerce",
          method: "Método de pagamento. Vem da plataforma de e-commerce",
          method_detail: "Detalhe do método de pagamento. Vem da plataforma de e-commerce"

        }
      }
    },
    
    assertions: {
      uniqueKey: ["order_id"],
      nonNull: ["order_id", "creation_date", "value.total"],
      rowConditions: [
        'status_type_category IN ("Aprovado", "Cancelado", "Pendente")'
      ]
    }
}

----------------------- MONTA A TABELA DE PEDIDOS ----------------------
----------- Pega os dados padronizados todos
SELECT
  '${dataform.projectConfig.schemaSuffix}' as tenant_id,
  *,

-------------------------- Itens do pedido 
-- Faz um join com prod_cat_order, conta as quantidades e cria um array com os pedidos
  (
    SELECT COUNT(*)
    FROM ${ref("stg_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
  ) AS quantity_variety_items,

  (
    SELECT SUM(prod_cat_order.quantity)
    FROM ${ref("stg_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
  ) AS quantity_items,

 ARRAY(
    SELECT AS STRUCT
      prod_cat_order.*
    FROM ${ref("stg_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
 ) AS items,


---------------------  customer_stats   
  STRUCT ( 
    order_id,
    MIN(CASE WHEN (status_type_category = "Aprovado") THEN creation_date END) OVER (PARTITION BY customer.customer_id) AS first_order_date,
    LAG(CASE WHEN (status_type_category = "Aprovado") THEN creation_date END) OVER (PARTITION BY customer.customer_id ORDER BY creation_date) AS previous_order_date,
    DATE_DIFF(creation_date, LAG(CASE WHEN (status_type_category = "Aprovado") THEN creation_date END) OVER (PARTITION BY customer.customer_id ORDER BY creation_date), DAY) AS days_since_last_order,
    COUNT(CASE WHEN (status_type_category = "Aprovado") THEN order_id END) OVER (PARTITION BY customer.customer_id ORDER BY creation_date) - 1 AS number_of_previous_orders  
  ) AS customer_stats,


FROM
   ${ref("stg_orders_dedup")} O
