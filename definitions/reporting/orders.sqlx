config {
    type: "table",
    schema: "reporting",
    description: "Pedidos realizados na loja",
    tags: ['1-general'],

    bigquery: {
      partitionBy: "DATE(creation_date)"
    },
    
    columns: {
        order_id: "Id único do pedido",
        creation_date: "Data em que o pedido foi feito",
        update_date: "Última atualização",
        payment: {
          columns: {
            method: "Método de pagamento"
          }
        }
    }
}

-- Tira os pedidos duplicados. Em uma futura versão em que faça a carga incrementa
-- deveríamos usar os recursos do próprio Dataform na declaração da carga incremental
-- 
WITH
  order_deduplicated AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY _airbyte_extracted_at DESC) AS rn
  FROM
    ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_orders")}
)



----------------------- MONTA A TABELA DE PEDIDOS ----------------------
SELECT
  *,

-------------------------- Itens do pedido 
-- Faz um join com prod_cat_order, conta as quantidades e cria um array com os pedidos
  (
    SELECT COUNT(*)
    FROM ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
  ) AS quantity_variety_items,

  (
    SELECT SUM(prod_cat_order.quantity)
    FROM ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
  ) AS quantity_items,

 ARRAY(
    SELECT AS STRUCT
      prod_cat_order.*
    FROM ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_prod_cat_order")} prod_cat_order
    WHERE prod_cat_order.order_id = O.order_id
 ) AS items,


---------------------  customer_stats   
  STRUCT 
  (
    MIN (creation_date) OVER (PARTITION BY customer.customer_id) AS first_order_date,
    LAG (creation_date) OVER (PARTITION BY customer.customer_id ORDER BY creation_date) AS previous_order_date,
    ROW_NUMBER() OVER (PARTITION BY customer.customer_id ORDER BY creation_date) - 1 AS number_of_previous_orders,
    CASE
      WHEN ROW_NUMBER() OVER (PARTITION BY customer.customer_id ORDER BY creation_date) - 1 = 0 THEN "Novo"
      ELSE "Recompra"
    END AS new_repurchase
  ) 
  AS customer_stats

FROM
  order_deduplicated O
--  ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_orders")} O

WHERE
  rn = 1 -- tira os registros duplicados

