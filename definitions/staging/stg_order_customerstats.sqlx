--------------------------------------------------------------------------------------------------
  -- Gera estatísticas do usuário relacionadas aos pedidos, para enriquecer a tabela orders
--------------------------------------------------------------------------------------------------
config {
    type: "view",
    schema: "staging",
    description: "Estatísticas do usuário relacionada ao pedido",
    tags: ['1-general']
}

-- Tira os pedidos duplicados. Em uma futura versão em que faça a carga incrementa
-- deveríamos usar os recursos do próprio Dataform na declaração da carga incremental
-- 
WITH
  order_deduplicated AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY _airbyte_extracted_at DESC) AS rn
  FROM
    ${ref("stand_"+dataform.projectConfig.vars.ecommPlatName+"_orders")}
)


SELECT
  *,
    -- Tipo de recompra do pedido
    CASE
      WHEN days_since_last_order IS NULL THEN "Novo"
      WHEN days_since_last_order <= 30 THEN "Recompra 30 dias"
      WHEN days_since_last_order <= 60 THEN "Recompra 60 dias"
      WHEN days_since_last_order <= 90 THEN "Recompra 90 dias"
      WHEN days_since_last_order <= 120 THEN "Recompra 120 dias"
      WHEN days_since_last_order <= 180 THEN "Recompra 180 dias"
      WHEN days_since_last_order <= 365 THEN "Recompra 365 dias"
      ELSE "Novo"
    END AS new_repurchase,

    -- flags
    IF(days_since_last_order <= 30, 1, 0) AS repurchase_30_days,
    IF(days_since_last_order <= 60, 1, 0) AS repurchase_60_days,
    IF(days_since_last_order <= 90, 1, 0) AS repurchase_90_days,
    IF(days_since_last_order <= 120, 1, 0) AS repurchase_120_days,
    IF(days_since_last_order <= 180, 1, 0) AS repurchase_180_days,
    IF(days_since_last_order <= 365, 1, 0) AS repurchase_365_days

FROM (
  SELECT
    order_id,
    MIN(creation_date) OVER (PARTITION BY customer.customer_id) AS first_order_date,
    LAG(creation_date) OVER (PARTITION BY customer.customer_id ORDER BY creation_date) AS previous_order_date,
    DATE_DIFF(creation_date, LAG(creation_date) OVER (PARTITION BY customer.customer_id ORDER BY creation_date), DAY) AS days_since_last_order,
    ROW_NUMBER() OVER (PARTITION BY customer.customer_id ORDER BY creation_date) - 1 AS number_of_previous_orders
  FROM order_deduplicated 
  WHERE  rn = 1 -- tira os registros duplicados

) 
 
